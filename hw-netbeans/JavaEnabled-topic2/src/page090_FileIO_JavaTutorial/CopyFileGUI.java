package page090_FileIO_JavaTutorial;

// For reading the text file
import java.io.FileReader;              // character stream
import java.io.BufferedReader;          // buffered character stream

// For reading the source ODT file
import java.io.FileInputStream;         // byte stream
import java.io.BufferedInputStream;     // buffered byte stream

// For writing the target ODT file(s)
import java.io.FileOutputStream;        // byte stream
import java.io.BufferedOutputStream;    // buffered byte stream

import java.io.IOException;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

import javax.swing.UIManager;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 * Copies an ODT file.
 * @author MHayes
 */
public class CopyFileGUI extends javax.swing.JFrame {

    // Filenames selected by user.
    private String txtFileName = null;
    private String odtFileName = null;
    private String odtDir = null;

    // File dialog
    private JFileChooser chooser = new JFileChooser();

    /** Creates new form CopyFile */
    public CopyFileGUI() {
        
        // Get the system look and feel
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch(Exception e) {
            throw new RuntimeException(e);
        }
        // Create the UI
        initComponents();
        //setButtonIcons();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtFileButton = new javax.swing.JButton();
        odtFileCopyButton = new javax.swing.JButton();
        resultsPanel = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        copyButton = new javax.swing.JButton();
        txtTextField = new javax.swing.JTextField();
        odtTextField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("File Copy Utility");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        txtFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/page090_FileIO_JavaTutorial/openFile.gif"))); // NOI18N
        txtFileButton.setText("Select name file...");
        txtFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFileButtonActionPerformed(evt);
            }
        });

        odtFileCopyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/page090_FileIO_JavaTutorial/openFile.gif"))); // NOI18N
        odtFileCopyButton.setText("Select file to copy...");
        odtFileCopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odtFileCopyButtonActionPerformed(evt);
            }
        });

        resultsTextArea.setColumns(20);
        resultsTextArea.setLineWrap(true);
        resultsTextArea.setRows(5);
        resultsPanel.setViewportView(resultsTextArea);

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        txtTextField.setEditable(false);

        odtTextField.setEditable(false);

        fileMenu.setText("File");

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(resultsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(copyButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtFileButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(odtFileCopyButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(odtTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                            .addComponent(txtTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFileButton)
                    .addComponent(txtTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(odtFileCopyButton)
                    .addComponent(odtTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(copyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resultsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Names-file button pressed
    private void txtFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFileButtonActionPerformed

        // Clear the results
        resultsTextArea.setText("");
        
        // Set the filter on the file chooser
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "text files", "txt");
        chooser.setFileFilter(filter);

        // Display chooser, wait for user response
        int userAction = chooser.showOpenDialog(this);

        // Check user response
        if (userAction == JFileChooser.APPROVE_OPTION) {
            // Save the path + filename
            txtFileName = chooser.getSelectedFile().getPath();
            // Display the filename that user selected
            txtTextField.setText(chooser.getSelectedFile().getName());
        }
    }//GEN-LAST:event_txtFileButtonActionPerformed

    // File-to-copy button pressed
    private void odtFileCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odtFileCopyButtonActionPerformed

        // Clear the results
        resultsTextArea.setText("");

        // Set the filter on the file chooser
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "ODT files", "odt");
        chooser.setFileFilter(filter);

        // Display chooser, wait for user repsonse
        int userAction = chooser.showOpenDialog(this);

        // Check user reponse
        if (userAction == JFileChooser.APPROVE_OPTION) {
            // Save the dir + name
            odtDir = chooser.getSelectedFile().getPath();
            odtDir = odtDir.substring(0, odtDir.lastIndexOf('\\')+1);
            odtFileName = chooser.getSelectedFile().getName();

            // Display the filename that user selected                                     ;
            odtTextField.setText(odtFileName);

        }
    }//GEN-LAST:event_odtFileCopyButtonActionPerformed

    // COPY button pressed
    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed

        // For reading the text file.
        FileReader     frText = null;
        BufferedReader brText = null;

        // For reading the source ODT file.
        FileInputStream     fisODT = null;
        BufferedInputStream bisODT = null;

        // For wrtiting to target ODT file(s)
        FileOutputStream     fosODT = null;
        BufferedOutputStream bosODT = null;

        // Clear the text area
        resultsTextArea.setText("Working...\n");

        // TXT and ODT selected?
        if (txtFileName == null || odtFileName == null) {
            resultsTextArea.setText("ERROR: select files first.");
        }
        else {
            // Do the copy
            try {
                // Open the text file
                frText = new FileReader(txtFileName);
                brText = new BufferedReader(frText);
                
                // Keep track of how many files created
                int fileCount = 0;

                // Read text file, make copy of ODT file
                String studentName = brText.readLine();
                while (studentName != null) {

                    // Open source ODT file
                    fisODT = new FileInputStream(odtDir + odtFileName);
                    bisODT = new BufferedInputStream(fisODT);

                    // Open target ODT file
                    String newODTname = odtDir + studentName + "-" + odtFileName;
                    fosODT = new FileOutputStream(newODTname);
                    bosODT = new BufferedOutputStream(fosODT);

                    // Copy source to target until EOF (-1)
                    int c;      // a byte is read into low-order 8 bits.
                    while ((c = bisODT.read()) != -1) {
                        bosODT.write(c);
                    }
                    // Close the source ODT file
                    bisODT.close();
                    fisODT.close();

                    // Close the target ODT file
                    bosODT.close();
                    fosODT.close();

                    // Display new filename(s)
                    resultsTextArea.append(studentName + "-" + odtFileName + "\n");
                    fileCount++;
                    
                    // Read next student name
                    studentName = brText.readLine();
                }
                resultsTextArea.append("DONE: " + fileCount + " files created.");
            }
            catch(IOException e) {
                    resultsTextArea.setText("ERROR: " + e);
            }
            finally {
                try {
                    // Close the streams for the text file.
                    if (brText != null) { brText.close(); }
                    if (frText != null) { frText.close(); }
                    
                    // Close the streams for sourse ODT file
                    if (bisODT != null) { bisODT.close(); }
                    if (fisODT != null) { fisODT.close(); }

                    // Close the streams for target ODT file
                    if (bosODT != null) { bosODT.close(); }
                    if (fosODT != null) { fosODT.close(); }
                }
                catch(IOException e) {
                    resultsTextArea.setText("ERROR: " + e);
                }
            }
        }
    }//GEN-LAST:event_copyButtonActionPerformed

    // User clicked on File > Exit
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        shutdownApplication();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /* User clicked on the X close-window button
     * This method is the actionListener for the "windowClosing" event for the
     * JFrame.
     * To Create the ActionListener for the JFrame:
     *   Design view > Inspector panel
     *   Right-click on the JFrame, select Properties
     *   1. Set "defaultCloseOperation" to DO_NOTHING
     *   2. Click on Events. Scroll down to the "windowClosing" event.
     *      Click on the down-arrow button to the right of <none>.
     *      Press the Close button.
     *      The actionListener method will be inserted into your code.
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
         shutdownApplication();
    }//GEN-LAST:event_formWindowClosing

    /* Called by the actionListeners for File > Exit, and  the
     * red X close-window button.
     */
    private void shutdownApplication() {

        // Ask user if they really want to exit
        int choice = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to exit?", "Confirm Exit",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        // Check user response
        if (choice == JOptionPane.OK_OPTION) {
            System.exit(0);
        }
    }

    private void setButtonIcons() {

        Icon imgicon = new ImageIcon("openFile.gif");
        txtFileButton.setIcon(imgicon);
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CopyFileGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton copyButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton odtFileCopyButton;
    private javax.swing.JTextField odtTextField;
    private javax.swing.JScrollPane resultsPanel;
    private javax.swing.JTextArea resultsTextArea;
    private javax.swing.JButton txtFileButton;
    private javax.swing.JTextField txtTextField;
    // End of variables declaration//GEN-END:variables

}
