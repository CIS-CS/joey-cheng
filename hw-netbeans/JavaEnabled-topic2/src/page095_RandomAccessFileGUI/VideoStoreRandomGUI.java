package page095_RandomAccessFileGUI;

import java.io.*;
import javax.swing.JOptionPane;

/**
 * A Swing application that uses an RAF as its data store.
 * Note that it does not use a Persister class, so the I/O to the RAF
 * is performed in the VideoTapeFile object (whidh is not the way you want
 * to do it.) This is more an illustration of how to use Swing.
 *
 * Note that the application will close when the user clicks on File > Exit,
 * and also when the user clicks on the X button in the upper right of the
 * application window. Your application should respond to both so that it
 * always shuts down gracefully.
 * 
 * @author  Mark Hayes
 */
public class VideoStoreRandomGUI extends javax.swing.JFrame {
   
    private RandomAccessFile theFile = null;;
    private int numVideos = 0;			// Number of videos in the file
    
    // Default location of files is root folder of Netbeans project.
    private static final String FILENAME = "videos-random.dat";  
    private int currentVideo = 0;               
    
    /** Initialize the GUI. */
    public VideoStoreRandomGUI() {
        initComponents();
    }
    
    /** The initComponents method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_tapeDetails = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        titleField = new javax.swing.JTextField();
        lengthLabel = new javax.swing.JLabel();
        lengthField = new javax.swing.JTextField();
        isLent = new javax.swing.JCheckBox();
        homeButton = new javax.swing.JButton();
        leftButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        endButton = new javax.swing.JButton();
        tapeNumberLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        applyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFile = new javax.swing.JMenuItem();
        exitApp = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutApp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Video Store System");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel_tapeDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Tape Details"));

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
        titleLabel.setText("Title");

        titleField.setFont(new java.awt.Font("Tahoma", 0, 12));

        lengthLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
        lengthLabel.setText("Length");

        lengthField.setFont(new java.awt.Font("Tahoma", 0, 12));

        isLent.setFont(new java.awt.Font("Tahoma", 0, 12));
        isLent.setText("On Loan");
        isLent.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        isLent.setMargin(new java.awt.Insets(0, 0, 0, 0));

        homeButton.setText("|<");
        homeButton.setToolTipText("First tape");
        homeButton.setEnabled(false);
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionPerformedFirstTape(evt);
            }
        });

        leftButton.setText("<");
        leftButton.setToolTipText("Previous Tape");
        leftButton.setEnabled(false);
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionPerformedPrevTape(evt);
            }
        });

        rightButton.setText(">");
        rightButton.setToolTipText("Next Tape");
        rightButton.setEnabled(false);
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionPerformedNextTape(evt);
            }
        });

        endButton.setText(">|");
        endButton.setToolTipText("Last Tape");
        endButton.setEnabled(false);
        endButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionPerformedLastTape(evt);
            }
        });

        tapeNumberLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
        tapeNumberLabel.setText("1 of 1");

        org.jdesktop.layout.GroupLayout jPanel_tapeDetailsLayout = new org.jdesktop.layout.GroupLayout(jPanel_tapeDetails);
        jPanel_tapeDetails.setLayout(jPanel_tapeDetailsLayout);
        jPanel_tapeDetailsLayout.setHorizontalGroup(
            jPanel_tapeDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel_tapeDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel_tapeDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lengthLabel)
                    .add(titleLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel_tapeDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel_tapeDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(isLent)
                        .add(titleField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                        .add(lengthField))
                    .add(tapeNumberLabel)
                    .add(jPanel_tapeDetailsLayout.createSequentialGroup()
                        .add(homeButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(leftButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(rightButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(endButton)))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel_tapeDetailsLayout.setVerticalGroup(
            jPanel_tapeDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel_tapeDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel_tapeDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(titleLabel)
                    .add(titleField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel_tapeDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lengthLabel)
                    .add(lengthField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(isLent)
                .add(15, 15, 15)
                .add(jPanel_tapeDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(homeButton)
                    .add(leftButton)
                    .add(rightButton)
                    .add(endButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tapeNumberLabel)
                .add(11, 11, 11))
        );

        addButton.setText("Add");
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        applyButton.setText("Apply");
        applyButton.setEnabled(false);
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        openFile.setText("Open File");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionPerformedOpenFile(evt);
            }
        });
        fileMenu.add(openFile);

        exitApp.setText("Exit");
        exitApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitAppActionPerformed(evt);
            }
        });
        fileMenu.add(exitApp);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Help");

        aboutApp.setText("About...");
        aboutApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutAppActionPerformed(evt);
            }
        });
        helpMenu.add(aboutApp);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel_tapeDetails, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(14, 14, 14)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(deleteButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(applyButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(cancelButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(addButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(addButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(deleteButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(applyButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelButton))
                    .add(jPanel_tapeDetails, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // User clicked on the 'First' button.
    private void actionPerformedFirstTape(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionPerformedFirstTape
        
        try 
        {
            // Get the first tape from the file
            VideoTapeFile tape = VideoTapeFile.readRecord(theFile, 0L);
            displayTapeDetails(tape);
            
            // Update the current tape number
            currentVideo = 1;
            tapeNumberLabel.setText(currentVideo + " of " + numVideos);
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, "Read failed: " + e.toString(),
                    "Read File", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_actionPerformedFirstTape

    // User clicked on the 'Last' button.
    private void actionPerformedLastTape(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionPerformedLastTape
        
        if (currentVideo < numVideos) {
            try 
            {
                // Get the last tape from the file
                VideoTapeFile tape = VideoTapeFile.readRecord(theFile,
                        (numVideos - 1) * VideoTapeFile.RECORD_BYTES);
                displayTapeDetails(tape);

                // Update the current tape number
                currentVideo = numVideos;
                tapeNumberLabel.setText(currentVideo + " of " + numVideos);
            }
            catch(IOException e)
            {
                JOptionPane.showMessageDialog(null, "Read failed: " + e.toString(),
                        "Read File", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_actionPerformedLastTape

    // User clicked on the 'Next' button.
    private void actionPerformedNextTape(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionPerformedNextTape
        
        if (currentVideo < numVideos) {
            try 
            {
                // Get the next tape from the file
                currentVideo = currentVideo + 1;
                VideoTapeFile tape = VideoTapeFile.readRecord(theFile, (currentVideo - 1) * VideoTapeFile.RECORD_BYTES);
                displayTapeDetails(tape);

                // Update the current tape number                
                tapeNumberLabel.setText(currentVideo + " of " + numVideos);
            }
            catch(IOException e)
            {
                JOptionPane.showMessageDialog(null, "Read failed: " + e.toString(), "Read File", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_actionPerformedNextTape

    // User click on the 'Previous' button.
    private void actionPerformedPrevTape(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionPerformedPrevTape
        
        if (currentVideo > 1) {
            try 
            {
                // Get the previous tape from the file
                currentVideo = currentVideo - 1;
                VideoTapeFile tape = VideoTapeFile.readRecord(theFile, (currentVideo - 1) * VideoTapeFile.RECORD_BYTES);
                displayTapeDetails(tape);

                // Update the current tape number                
                tapeNumberLabel.setText(currentVideo + " of " + numVideos);
            }
            catch(IOException e)
            {
                JOptionPane.showMessageDialog(null, "Read failed: " + e.toString(), "Read File", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_actionPerformedPrevTape
   
    // User click on: File > Open File
    private void actionPerformedOpenFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionPerformedOpenFile
        try
        {
            // Open the file
            theFile = new RandomAccessFile(FILENAME, "rw");
            numVideos = (int) theFile.length() / VideoTapeFile.length();
            JOptionPane.showMessageDialog(null, "Tapes in " + FILENAME + " = " + numVideos, "Open File", JOptionPane.INFORMATION_MESSAGE);
            
            // If the file contains tapes, then enable buttons
            if (numVideos > 0) {
                
                // Read the first tape from the file
                VideoTapeFile tape = VideoTapeFile.readRecord(theFile, 0L);     
                displayTapeDetails(tape);
                
                enableButtons();
                
                // Display the tape number
                currentVideo = 1;
                tapeNumberLabel.setText(currentVideo + " of " + numVideos);
                tapeNumberLabel.setVisible(true);
            }    
        }
        catch( IOException e)
        {
            JOptionPane.showMessageDialog(null, "Open failed: " + e.toString(), "Open File", JOptionPane.ERROR_MESSAGE);
        }
        // Always enable the Add button
        addButton.setEnabled(true);
    }//GEN-LAST:event_actionPerformedOpenFile
    
    // User pressed the Add button
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        try
        {
            // Get the user's tape details
            String title = titleField.getText();
            if (title == null || title.equals("")) {
                throw new Exception();
            }
            int length   = Integer.parseInt(lengthField.getText());
            boolean lent = isLent.isSelected() ? true : false;

            // Create a tape object
            VideoTapeFile theVideo = new VideoTapeFile(title, length, lent);

            // The video object will be added to the end of the file
            long posToAdd = numVideos * VideoTapeFile.length();

            // Add the video to the file
            VideoTapeFile.writeRecord(theFile, theVideo, posToAdd);

            // Update the video count
            numVideos = numVideos + 1;
            currentVideo = numVideos;
            tapeNumberLabel.setText(currentVideo + " of " + numVideos);
            JOptionPane.showMessageDialog(null, "Video added OK.", "Add Video", JOptionPane.INFORMATION_MESSAGE);

            // Enable buttons
            enableButtons();
            tapeNumberLabel.setVisible(true);
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(null, "The length must be an integer.", "Add Video", JOptionPane.WARNING_MESSAGE);
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, "Add failed: " + e.toString(), "Add Video", JOptionPane.ERROR_MESSAGE);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Enter a title.", "Add Video", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    // User pressed the Delete button
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        int index = 0;

        try
        {   // Overwrite the deleted tape by shuffling subsequent tapes 'to the left'.
            for(index = currentVideo; index < numVideos; index++)
            {
                // Read the tape to be shifted
                VideoTapeFile tape = VideoTapeFile.readRecord(theFile, index * VideoTapeFile.RECORD_BYTES);

                // Write the tape into the new position
                long posToAdd = (index - 1) * VideoTapeFile.length();
                VideoTapeFile.writeRecord(theFile, tape, posToAdd);
            }
            // Truncate the file by the length of one tape.
            numVideos = numVideos - 1;
            theFile.setLength(numVideos * VideoTapeFile.RECORD_BYTES);

            // If we deleted the last video, then adjust currentVideo
            if (currentVideo > numVideos) {
                currentVideo = currentVideo - 1;
            }

            if (numVideos > 0)
            {
                // Display the current video
                VideoTapeFile tape = VideoTapeFile.readRecord(theFile, (currentVideo - 1) * VideoTapeFile.RECORD_BYTES);
                displayTapeDetails(tape);
                tapeNumberLabel.setText(currentVideo + " of " + numVideos);
            }
            else
            {
                // No videos left. Clear the fields.
                titleField.setText("");
                lengthField.setText("");
                isLent.setSelected(false);
                tapeNumberLabel.setText("");
                // Disable buttons
                deleteButton.setEnabled(false);
                applyButton.setEnabled(false);
                cancelButton.setEnabled(false);
                cancelButton.setEnabled(false);
                homeButton.setEnabled(false);
                rightButton.setEnabled(false);
                leftButton.setEnabled(false);
                endButton.setEnabled(false);
            }
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, "Delete failed during shuffle at position " + index + ": " +
                                          e.toString(), "Delete Video", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    // User pressed the Apply button.
    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed

        // Get the user's tape details
        String title = titleField.getText();
        int length   = Integer.parseInt(lengthField.getText());
        boolean lent = isLent.isSelected() ? true : false;

        // Create a tape object
        VideoTapeFile theVideo = new VideoTapeFile(title, length, lent);

        // Overwrite the old video with the new details
        long posToAdd = (currentVideo - 1) * VideoTapeFile.length();
        try
        {
            VideoTapeFile.writeRecord(theFile, theVideo, posToAdd);
            JOptionPane.showMessageDialog(null, "Video updated OK.", "Edit Video", JOptionPane.INFORMATION_MESSAGE);
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, "Edit failed: " + e.toString(), "Edit Video", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_applyButtonActionPerformed

    // User pressed the Cancel button (red X)
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed

            // Redisplay original video details
        try
        {
            VideoTapeFile tape = VideoTapeFile.readRecord(theFile, (currentVideo - 1) * VideoTapeFile.RECORD_BYTES);
            displayTapeDetails(tape);
        }
        catch(IOException e) {
            JOptionPane.showMessageDialog(null, "Cancel failed: " + e.toString(), "Cancel Edit", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    // User clicked on File > Exit
    private void exitAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitAppActionPerformed
        shutdownApplication();
    }//GEN-LAST:event_exitAppActionPerformed

    // User clicked on Help > About...
    private void aboutAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutAppActionPerformed
        JOptionPane.showMessageDialog(
                null,
                "Video Store Random, version 1.1\n" +
                    "Press 'File > Open File' to begin.",
                "About",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutAppActionPerformed

    /* User clicked on the X close-window button
     * This method is the actionListener for the "windowClosing" event for the
     * JFrame.
     * To Create the ActionListener for the JFrame:
     *   Design view > Inspector panel
     *   Right-click on the JFrame, select Properties
     *   1. Set "defaultCloseOperation" to DO_NOTHING
     *   2. Click on Events. Scroll down to the "windowClosing" event.
     *      Click on the down-arrow button to the right of <none>.
     *      Press the Close button.
     *      The actionListener method will be inserted into your code.
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        shutdownApplication();
    }//GEN-LAST:event_formWindowClosing
    
    /* Called by the actionListeners for File > Exit, and  the
     * red X close-window button.
     */
    private void shutdownApplication() {

        // Ask user if they really want to exit
        int choice = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to exit?", "Confirm Exit",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        // Check user response
        if (choice == JOptionPane.OK_OPTION) {
            try {
                if (theFile != null) {
                    theFile.close();
                }
            }
            catch(IOException e) {
                JOptionPane.showMessageDialog(null, "Close File",
                        e.toString(), JOptionPane.ERROR_MESSAGE);
            }
            System.exit(0);
        }
    }

    /* Display the details for a tape.
     * Called when a new, or the next, tape is to be displayed.
     */
    private void displayTapeDetails(VideoTapeFile tape) {
        
        titleField.setText(tape.getTitle().trim());
        lengthField.setText(new Integer(tape.getLength()).toString());
        isLent.setSelected(tape.isLent() ? true : false);
    }

    /* Turn on all the button.
     * Called after the file is successfully opened.
     */
    private void enableButtons() 
    {
        // Enable the file-navigation buttons
        homeButton.setEnabled(true);
        leftButton.setEnabled(true);
        rightButton.setEnabled(true);
        endButton.setEnabled(true);

        // Enable the Delete, Apply, Candel buttons                
        deleteButton.setEnabled(true);
        applyButton.setEnabled(true);
        cancelButton.setEnabled(true); 
    }
    
    /**
     * Entry point to the application.
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VideoStoreRandomGUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutApp;
    private javax.swing.JButton addButton;
    private javax.swing.JButton applyButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton endButton;
    private javax.swing.JMenuItem exitApp;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton homeButton;
    private javax.swing.JCheckBox isLent;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel_tapeDetails;
    private javax.swing.JButton leftButton;
    private javax.swing.JTextField lengthField;
    private javax.swing.JLabel lengthLabel;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JButton rightButton;
    private javax.swing.JLabel tapeNumberLabel;
    private javax.swing.JTextField titleField;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
    
}
